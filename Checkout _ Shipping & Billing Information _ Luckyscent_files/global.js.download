// Deprecated jQuery Code
//var matched, browser;

//jQuery.uaMatch = function (ua) {
//    ua = ua.toLowerCase();

//    var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
//        /(webkit)[ \/]([\w.]+)/.exec(ua) ||
//        /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
//        /(msie) ([\w.]+)/.exec(ua) ||
//        ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
//        [];

//    return {
//        browser: match[1] || "",
//        version: match[2] || "0"
//    };
//};

//matched = jQuery.uaMatch(navigator.userAgent);
//browser = {};

//if (matched.browser) {
//    browser[matched.browser] = true;
//    browser.version = matched.version;
//}

//// Chrome is Webkit, but Webkit is also Safari.
//if (browser.chrome) {
//    browser.webkit = true;
//} else if (browser.webkit) {
//    browser.safari = true;
//}

//jQuery.browser = browser;

// Tiny PubSub Lib https://github.com/cowboy/jquery-tiny-pubsub
(function ($) {

    var o = $({});

    $.subscribe = function () {
        o.on.apply(o, arguments);
    };

    $.unsubscribe = function () {
        o.off.apply(o, arguments);
    };

    $.publish = function () {
        o.trigger.apply(o, arguments);
    };

    window.copyToClipboard = function(element, data, callback) {
        
        if(element != null)
            data = $(element).is('input,textarea') ? $(element).val() : $(element).text();       

        var hasData = !(data == undefined || data == null || data == "");

        if(hasData) {
            /*var $temp = $("<input>");
            $("body").append($temp);
            $temp.val(data).select();
            document.execCommand("copy");
            $temp.remove();*/
            var $temp = $("<textarea>");
            $("body").append($temp);
            $temp.val(data).select()
                .on("focus", function() { document.execCommand('selectAll',false,null) })
                .focus();
            document.execCommand("copy");
            $temp.remove();
        }

        if(typeof(callback) == 'function')
            callback(hasData);
    }

}(jQuery));

function storageAvailable() {
	try {
		var storage = window['localStorage'],
			x = '__storage_test__';
		storage.setItem(x, x);
		storage.removeItem(x);
		return true;
	}
	catch(e) {
		return false;
	}
}




var CookieHelper = (function () {
    return {
        create: function(name, value, msTime) {
            var expires = "",
                cookieString = "";
            if (this.read(name))
                this.erase(name);

            if (msTime) {
                var date = new Date();
                //date.setTime(date.getTime()+(days*24*60*60*1000));
                date.setTime(date.getTime() + msTime);
                expires = "; expires=" + date.toGMTString();
            }
            cookieString = name + "=" + value + expires + "; path=/";     
            //console.log(cookieString);       
            document.cookie = cookieString;
        },

        read: function(name) {
            var nameEq = name + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEq) == 0) return c.substring(nameEq.length, c.length);
            }
            return null;
        },

        erase: function(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        },

        setObject : function(key, value, msTime) {
            try {
                this.create(key, JSON.stringify(value), msTime);
            } catch(e) {
                this.create(key, value, msTime);
            }
            
        },

        getObject : function(key) {
            var value = this.read(key);
            try {
                return value && JSON.parse(value);
            } catch(e) {
                return value;
            }
        }
    };
}());


(function () {

    // Format Date Time Extension

    var formatDateTime = function(date) {
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var ampm = hours >= 12 ? 'pm' : 'am';
        hours = hours % 12;
        hours = hours ? hours : 12; // the hour '0' should be '12'
        minutes = minutes < 10 ? '0'+minutes : minutes;
        var strTime = hours + ':' + minutes + ' ' + ampm;

        return date.getMonth()+1 + "/" + date.getDate() + "/" + date.getFullYear() + "  " + strTime;
        
    }

    Date.prototype.formatDateTime = function() {
        return formatDateTime(this);
    }


    // Querystring Params Extension
    var getParams = function(url) {
        var queryString = {};
        var query = url.substring(url.indexOf("?") + 1);
        var vars = query.split("&");


        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split("=");

            if (pair.length < 2)
                continue;

            if (typeof queryString[pair[0]] === "undefined") {
                queryString[pair[0]] = pair[1];
            } else if (typeof queryString[pair[0]] === "string") {
                var arr = [queryString[pair[0]], pair[1]];
                queryString[pair[0]] = arr;
            } else {
                queryString[pair[0]].push(pair[1]);
            }
        }

        return queryString;
    };


    window.location.params = function () {
        return getParams(window.location.search);
    }();

    String.prototype.getParams = function() {
        return getParams(this);
    };


    // To Decimal, To Money Extensions
    String.prototype.toDecimal = function() {
        return parseFloat(this.replace(/[^0-9-.]/g, ''));
    };

    /* 
    decimal_sep: character used as deciaml separtor, it defaults to '.' when omitted
    thousands_sep: char used as thousands separator, it defaults to ',' when omitted
    */
    Number.prototype.toMoney = function(decimals, decimal_sep, thousands_sep) {
        var n = this,
            c = isNaN(decimals) ? 2 : Math.abs(decimals), //if decimal is zero we must take it, it means user does not want to show any decimal
            d = decimal_sep || '.', //if no decimal separator is passed we use the dot as default decimal separator (we MUST use a decimal separator)

            /*
        according to [http://stackoverflow.com/questions/411352/how-best-to-determine-if-an-argument-is-not-sent-to-the-javascript-function]
        the fastest way to check for not defined parameter is to use typeof value === 'undefined' 
        rather than doing value === undefined.
        */
            t = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep, //if you don't want to use a thousands separator you can pass empty string as thousands_sep value

            sign = (n < 0) ? '-' : '',

            //extracting the absolute value of the integer part of the number and converting to string
            i = parseInt(n = Math.abs(n).toFixed(c)) + '',

            j = ((j = i.length) > 3) ? j % 3 : 0;
        return sign + (j ? i.substr(0, j) + t : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');
    };



    // String Format Extension
    String.prototype.format = function () {
        var s = this,
            i = arguments.length;

        while (i--) {
            s = s.replace(new RegExp('\\{' + i + '\\}', 'gm'), arguments[i]);
        }
        return s;
    };


    // Pretty Url Extension
    String.prototype.prettyUrl = function() {
        var str = this;

        str = str.toLowerCase();
        str = str.replace(/[^a-z0-9]+/g, '-');
        str = str.replace(/^-|-$/g, '');

        return str.toLowerCase();

    };
    
    String.prototype.validateEmail = function() { 
        var str = this,
            re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(str);
    }; 


    // Local storage helpers
    Storage.prototype.setObject = function(key, value) {
    this.setItem(key, JSON.stringify(value));
    }

    Storage.prototype.getObject = function(key) {
        var value = this.getItem(key);
        return value && JSON.parse(value);
    }


}());



